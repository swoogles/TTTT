plugins {
  id 'org.unbroken-dome.test-sets' version '1.5.0'
  id "com.github.spotbugs" version "1.6.2"
  id "net.ltgt.errorprone" version "0.0.14"
  id 'com.github.ksoichiro.console.reporter' version '0.5.0'
}

apply plugin: 'java'
apply plugin: 'jacoco'

repositories {                                                                                                                                                            
  mavenCentral()
}    

dependencies {
		testCompile "org.testng:testng:6.14+"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.19.0'
    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
}

test {
  useTestNG()
}

testSets {
    integrationTest
}

integrationTest {
  useTestNG()
  // TODO Turn this into a reusable function that can be used for test & integrationTest
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			}
		}
	}
}

test {
  // TODO Turn this into a reusable function that can be used for test & integrationTest
	testLogging {
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			}
		}
	}

  jacoco {
    append = false
      destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
      classDumpDir = file("$buildDir/jacoco/classpathdumps")
  }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        // It'd be nice to spit out this dir name whenever jacoco runs via gradle.
        html.destination file("${buildDir}/jacocoHtml")
    }
}

check {
  dependsOn integrationTest
  dependsOn jacocoTestReport
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled false
      html.enabled true
  }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.000
            }
        }

    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

// TODO Consider if this should be connected
// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification
